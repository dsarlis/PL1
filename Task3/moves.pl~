read_and_return(F,Voters):-
	open(F, read, Stream),
    read_line_to_codes(Stream, _),
	read_line_to_codes(Stream, SecondLine),
	atom_codes(B, SecondLine),
	atom_chars(B,Voters),
	close(Stream).
	
	
isWinning([]).
isWinning([w|T]):- !,isWinning(T).
isWinning([e|T]):- !,isWinning1(T).
isWinning([b|T]):- !,isWinning2(T).

isWinning1([]).
isWinning1([e|T]):- !,isWinning1(T).
isWinning1([b|T]):- !,isWinning2(T).

isWinning2([]).
isWinning2([b|T]):- !,isWinning2(T).


swap([b,e],[e,b]).
swap([e,w],[w,e]).
swap([b,e,e|T],[e,b,e|T]).
swap([e,b,e|T],[e,e,b|T]).
swap([b,b,e|T],[e,b,b|T]).
swap([b,b,e|T],[b,e,b|T]).
swap([b,w,e|T],[e,w,b|T]).
swap([b,e,b|T],[e,b,b|T]).
swap([e,w,w|T],[w,w,e|T]).
swap([e,w,w|T],[w,e,w|T]).
swap([e,e,w|T],[e,w,e|T]).
swap([e,w,e|T],[w,e,e|T]).
swap([e,b,w|T],[w,b,e|T]).
swap([w,e,w|T],[w,w,e|T]).


newStates(X,Front,L):-
	!,newStates(X,Front,[],L).
newStates([A,B],Front,Acc,Acc2):-
	!,findall(X,swap([A,B],X),L1),
	reverse(Front,NF),
	mymap(L1,NF,NAcc),
	append(NAcc,Acc,Acc2).
newStates([A,B,C|T],Front,Acc,Acc2):-
	!,findall(X,swap([A,B,C|T],X),L1),
	reverse(Front,NF),
	mymap(L1,NF,L),
	append(L,Acc,NL),
	NFront = [A|Front],
	newStates([B,C|T],NFront,NL,Acc2).

	
mymap(X,F,L):- empty_nb_set(Set),mymap(X,F,Set,L).
mymap([],_,Acc,Acc2):- nb_set_to_list(Acc,Acc2).
mymap([H|T],Front,Acc,Acc2):-
	!,append(Front,H,L1),
	add_nb_set(L1,Acc,_),
	mymap(T,Front,Acc,Acc2).


bfsSolver([],_,_,_,_):- !,2 = 3.
bfsSolver(_,_,Acc,Acc,1).
bfsSolver(Queue,Closed,Acc,Acc2,0):-
	bfsSolveraux(Queue,Closed,[],Acc,Acc2).
	

bfsSolveraux([],Closed,L,Result,Acc):-
	NResult is Result+1,
	bfsSolver(L,Closed,NResult,Acc,0).
bfsSolveraux([H|T],Closed,L,Result,Acc):-
	(isWinning(H) -> bfsSolver([H|T],Closed,Result,Acc,1)
	;(add_nb_set(H,Closed,Bool),Bool = false -> bfsSolveraux(T,Closed,L,Result,Acc)
	;(newStates(H,[],[],L1),
	append(L,L1,NQueue),
	bfsSolveraux(T,Closed,NQueue,Result,Acc)))).
	
moves(F,Moves):-
	read_and_return(F,Voters),
	empty_nb_set(Set),
	bfsSolver([Voters],Set,0,Moves,0).
