omilies(F, Answers):-
	once(read_and_return(F, Stream, N, Graph, CityA, CityB, CityC, L)),
	citySort(Graph, [], SortedGraph),
	reverse(SortedGraph,Graph1),
	once(fillKeys(Graph1,N,[],Graph2)),
	once(initialize(N, CityA, [], DistA)),
        once(initialize(N, CityB, [], DistB)),
        once(initialize(N, CityC, [], DistC)),
        once(dijkstra(N, [(0,CityA)], Graph2, DistA, AList)),
        once(dijkstra(N, [(0,CityB)], Graph2, DistB, BList)),
        once(dijkstra(N, [(0,CityC)], Graph2, DistC, CList)),
	reverse(AList,AList1),
	reverse(BList,BList1),
	reverse(CList,CList1),
	questions(Stream, AList1, BList1, CList1, L, Answers),
	close(Stream).


writeListaux(Stream, []):- close(Stream).
writeListaux(Stream, [H|T]):-
	write(Stream,H),
	nl(Stream),
	writeListaux(Stream,T).
	
writeList(F,L):-
	open(F,write,Stream),
	writeListaux(Stream,L).

halve([], [], []).
halve([A], [A], []).
halve([A,B|Cs], [A|X], [B|Y]) :- halve(Cs, X, Y).

merge([], Ys, Ys).
merge(Xs, [], Xs).
merge([(X1,X2)|Xs], [(Y1,Y2)|Ys], M) :-
   ( X1 > Y1 -> M = [(X1,X2)|Ms], merge(Xs, [(Y1,Y2)|Ys], Ms) ; M = [(Y1,Y2)|Ms], merge([(X1,X2)|Xs], Ys, Ms) ).

mergeSort([], []).
mergeSort([E], [E]).
mergeSort([E1,E2|Es], SL) :- halve([E1,E2|Es], L1, L2), mergeSort(L1, SL1), mergeSort(L2, SL2), merge(SL1, SL2, SL).

citySort([],Acc,Acc2):- reverse(Acc,Acc2).
citySort([Key-Pairs|T], Acc, Result):-
	mergeSort(Pairs,X),
	Acc1 = [Key-X|Acc],
	citySort(T, Acc1, Result).


read_and_return(F, Stream, N, Graph, CityA, CityB, CityC, L):-
	!,open(F, read, Stream),
	read_line_to_codes(Stream, FirstLine),
   	atom_codes(A, FirstLine),
   	atomic_list_concat(As, ' ', A),
    maplist(atom_number, As, [N, M]),
	read_edges(Stream, M, [], Pairs),
	keysort(Pairs, SortedPairs),
	group_pairs_by_key(SortedPairs,Graph),
	read_line_to_codes(Stream, Line),
	atom_codes(B, Line),
    atomic_list_concat(Bs, ' ', B),
    maplist(atom_number, Bs, [CityA, CityB, CityC, L]).
	
	
read_edges(_,0, Acc, Acc).
read_edges(Stream, M, Acc, Edges):-
		!,M > 0,
        read_line_to_codes(Stream, Line),
        atom_codes(A, Line),
        atomic_list_concat(As, ' ', A),
        maplist(atom_number, As, [City1,City2,Dist]),
        E1 = City1-(City2,Dist),
	    E2 = City2-(City1,Dist),
        M1 is M - 1,
	    Acc1 = [E1,E2|Acc],
        read_edges(Stream, M1, Acc1, Edges).
	
	

my_neighbours(_,[],[]).
my_neighbours(K,[Key-List|T],X):-
	!,(K =:= Key -> 
		X = List
	;my_neighbours(K,T,X)).



update(_, PQueue, PQueue, X, [], X, _).
update(N, PQueue, Acc, [A|T1], [(City,Dist)|T2], [X|Xs], Udist):-
	N > 0,
	Alt is Udist + Dist,
	N1 is N-1,
	(N > City ->
	   X = A,
           update(N1,PQueue,Acc,T1,[(City,Dist)|T2],Xs, Udist)
        ;(Alt < A ->
	      X = Alt,
	      ord_add_element(PQueue,(Alt,N),NPQueue),
	      update(N1, NPQueue, Acc, T1, T2, Xs, Udist)
	    ;X = A,
	     update(N1, PQueue, Acc, T1, T2, Xs, Udist))).

fillKeys([], _, Acc, Acc).
fillKeys([Key-Pairs|T], Count, Acc, Result):-
	NCount is Count - 1,
	(Key =:= Count ->
		Acc1 = [Key-Pairs|Acc],
		fillKeys(T, NCount, Acc1, Result)
	; Acc1 = [Count-[]|Acc],
	  fillKeys([Key-Pairs|T], NCount, Acc1, Result)).


peekAt(1,[Dist|_],Dist).
peekAt(N,[_|T],Dist):- 
	!,N1 is N - 1,
	peekAt(N1,T,Dist).

initialize(0, _, Acc, Acc2):- reverse(Acc,Acc2).
initialize(K, City, Acc, DistList):-
	!,K > 0,
	K1 is K-1,
	(City =\= K ->
		Acc1 = [10000000|Acc]
	;Acc1 = [0|Acc]),
	initialize(K1, City, Acc1, DistList).
	

dijkstra(N, PQueue, Graph, DistList, Result):-
	empty_nb_set(Visited),
	dijkstra(N, Visited, PQueue, Graph, DistList, Result).
dijkstra(_, _, [], _ , DistList, DistList).
dijkstra(N, Visited, [(Min,Pos)|T],Graph,DistList,Result):-
	(add_nb_set(Pos, Visited,Bool), Bool = true ->
		once(my_neighbours(Pos,Graph,Neighbours)),
		once(update(N, T, NPQueue, DistList, Neighbours, NewList, Min)),
	 	dijkstra(N, Visited, NPQueue,Graph,NewList,Result)
	;dijkstra(N, Visited, T, Graph, DistList, Result)).
	
	
questions(Stream, AList, BList, CList, L, Answers):-
	!,(L > 0 ->
		Answers = [Answer|As],
		read_line_to_codes(Stream, Line),
		atom_codes(A, Line),
		atom_number(A, City),
		peekAt(City, AList, ADist),
		peekAt(City, BList, BDist),
		peekAt(City, CList, CDist),
		search(AList,BList,CList,ADist,BDist,CDist,Answer),
		L1 is L-1,
		questions(Stream, AList, BList, CList, L1, As)
	;L =:= 0 ->
		Answers = []).
	
search([], _, _, _, _, _,true).
search([HA|TA], [HB|TB], [HC|TC], ADist, BDist, CDist, Answer):-
	!,(HA < ADist , HB < BDist , HC < CDist ->
		Answer = false
	;search(TA, TB, TC, ADist, BDist, CDist, Answer)).
