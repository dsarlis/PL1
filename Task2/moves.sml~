fun parse file = 
	let
	     val input = TextIO.openIn file
	     val voters = Option.valOf (TextIO.scanStream (Int.scan StringCvt.DEC) input)
  	     val _ = TextIO.inputLine input
	     val fasma = Array.array (voters,#"$")

	     fun readChar 0 acc = acc
	       | readChar n acc = 
			let	
			     val nextChar = Option.valOf (TextIO.scanStream (Char.scan) input)
			     val _ = Array.update (acc,(voters-n),nextChar)
			in
			     readChar (n-1) acc
			end
	in
		readChar voters fasma
	end


fun member _ [] = false
  | member x (h::t) = if x=h then true else member x t



fun bfsSolver _ _ _ true = ~1
  | bfsSolver queue closed result false = 
	let
		val lst = Queue.contents queue

		fun bfs_aux [] = bfsSolver queue closed (result+1) (Queue.isEmpty queue)
		  | bfs_aux (h::t) = 
			let 
			      val _ = Queue.dequeue queue 
			in
			      if is_winning h then result
                              else if not (member h closed) then (*function for creating new states*)
                              else bfs_aux t
			end

	in
		bfs_aux lst
	end

	
